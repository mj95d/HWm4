//Abdulmajeed Hussain


//         1.اكتب برنامج Java لاختبار ما إذا كان العنصر الأول والأخير من صفيف من الأعداد الصحيحة متماثلين. يجب أن يكون طول الصفيف أكبر من أو يساوي 2


      

       int [] array = {50, -20, 0, 30, 40, 60, 10};
        int index = 0;

            for (int i = 1 ; i <= array.length-1; i++) {

                if (array.length >= 2) {
                    index = array[0];

                    if (array[i] == index) {
                        System.out.println("integers are same " + array[i] + " = " + array[i]);
                    }
                    else{
                        continue;
                    }
                }else{
                    System.out.println("array length not equal 2");
                }
            }







                     //2.اكتب برنامج Java للعثور على أكبر العناصر k في مصفوفة معينة. يمكن أن تكون العناصر الموجودة في الصفيف بأي ترتيب.





{
  
    {
        Scanner sc=new Scanner(System.in);
        int n;     //Declare array size
        System.out.println("Enter the size of the array");
        n=sc.nextInt();

        int arr[]=new int[n];   //Declare array
        System.out.println("Enter the array");
        for(int i=0;i<n;i++)
        {
            arr[i]=sc.nextInt();
        }

        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]<arr[j])
                {
                    int temp=arr[i];
                    arr[i]=arr[j];
                    arr[j]=temp;
                }
            }
        }

        System.out.println("Largest element is "+arr[0]);

    }
}




                                            //3.اكتب برنامج Java للعثور على الأرقام الأكبر من متوسط أرقام مصفوفة معينة.



    public static void main(String[] args)
    {
       
        int[] nums = { 1, 4, 17, 7, 25, 3, 100 };
	        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
        }
        double average = sum / nums.length;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > average) {
                System.out.print(nums[i] + " ");
            }
        }



                              //4.اكتب برنامج Java للحصول على قيمة أكبر بين العنصر الأول والأخير من مجموعة من الأعداد الصحيحة.


import java.util.Arrays; 
 public class Exercise80 {
 public static void main(String[] args)
 {
        int[] nums = { 1, 4, 17, 7, 25, 3, 100 };
        int first = nums[0];
        int last = nums[nums.length - 1];
        int larger = Math.max(first, last);
     System.out.println(larger);
 
 }
}


                                     //  5. اكتب برنامج Java لتبديل العناصر الأولى والأخيرة من الصفيف وإنشاء مصفوفة جديدة.




public class Main {
    public static void main(String[] args) {

        int[] nums = { 1, 4, 17, 7, 25, 3, 100 };
        int[] swapped = new int[nums.length];
        swapped[0] = nums[nums.length - 1];
        for (int i = 1; i < nums.length - 1; i++) {
            swapped[i] = nums[i];
        }
        swapped[nums.length - 1] = nums[0];
        System.out.println(nums.toString());
        System.out.println(swapped.toString());
	
	}
	}








                                                         
                                                 //6.اكتب برنامج Java للعثور على أطول كلمة في قاموس معين.



class Main {
      public static void main(String[] args) {
     
        String[] dictionary = { "cat", "dog", "red", "is", "am"};
        ArrayList<String> longestWords = new ArrayList<>();
        int maxLength = 0;
        for (String word : dictionary) {
            if (word.length() > maxLength) {
                longestWords.clear();
                longestWords.add(word);
                maxLength = word.length();
            } else if (word.length() == maxLength) {
                longestWords.add(word);
            }
        }
        System.out.println(longestWords);











                                                    //7.اكتب برنامج Java مدفوعا بالقائمة مع الخيار التالي:




                    myArray = newNum(kb, myArray);
                    break;
                case 2:
                    display(myArray);
                    break;
                case 3:

                    break;
                case 4:

                    break;
                case 5:

                    break;
            }
            option = menu(kb);
        }
        if (option == 6)
        {
            System.out.println();
            System.out.println("Thank you. Have a nice day.");
        }



                                                   //8. اكتب برنامجا يعرض عدد تكرارات عنصر ما في المصفوفة



 String  students new String(6);
 String  students = {"1", "1", "1", "3","3","5"};

 students[0] = "1";
 students[1] = 1";
 students[2] = "1";
 students[3] = "1";
  for (int i = 0; i <= students.length - 5; i++) {
    System.out.println(students[i]);


 for (String student : students) {
    System.out.println(student + " 1 " + student.length());
  }


}
 }
 }


                                       //9. اكتب برنامجا يضع العناصر الفردية للمصفوفة قبل العناصر الزوجية

                                                                //الصفيف الأصلي:
                                                            //[2,3,40,1,5,9,4,10,7]



       int[] arr = {2, 3, 40, 1, 5, 9, 4, 10, 7};
        int[] result = new int[arr.length];
       int oddIndex = 0;
        int evenIndex = arr.length - 1;
        for (int i = 0; i < arr.length; i++) {
           if (arr[i] % 2!= 0) {
                result[oddIndex] = arr[i];
                oddIndex++;
            } else {
               result[evenIndex] = arr[i];
                evenIndex--;
            }
        }
        System.out.println(Arrays.toString(result));
    }
}






                           
                                                   //10. اكتب برنامجا يختبر المساواة بين صفيفين






        final int[] array1 = { 1, 2, 3, 4, 5 };
        final int[] array2 = { 1, 2, 3, 4, 5 };

        final boolean intCheck = Arrays.equals(array1, array2);
        System.out.println("Two Integers are Equal :: " + intCheck);
    }
}
